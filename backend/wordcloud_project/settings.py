"""
Django settings for wordcloud_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get('DEBUG')) == 1

SITE_ID = 1

ALLOWED_HOSTS = [os.environ.get('ALLOWED_HOSTS')]
INTERNAL_IPS = [
    "127.0.0.1",
    "localhost"
]
CSRF_TRUSTED_ORIGINS = []

# Control which domains can access your API
# For production, add your frontend domain(s)
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",    # React development server
#     "http://127.0.0.1:3000",    # Alternative local address
# ]
# Allow cookies to be sent with CORS requests
CORS_ALLOW_CREDENTIALS = True


# Application definition

INSTALLED_APPS = [
    # Django built-in apps
    'django.contrib.admin',  # Admin site
    'django.contrib.auth',  # Authentication system
    'django.contrib.contenttypes',  # Content type system
    'django.contrib.sessions',  # Session framework
    'django.contrib.messages',  # Messaging framework
    'django.contrib.staticfiles',  # Static files management
    'django.contrib.sites',  # Site framework (required for allauth)

    # Third party apps
    'rest_framework',  # Django REST Framework for API
    'rest_framework.authtoken',  # Token authentication
    'corsheaders',  # Cross-Origin Resource Sharing
    'drf_yasg',  # Swagger/OpenAPI documentation
    'django_filters',  # Filtering for API endpoints

    # Authentication apps
    'allauth',  # Advanced authentication
    'allauth.account',  # User accounts
    'allauth.socialaccount',  # Social authentication
    'allauth.socialaccount.providers.google',  # Google OAuth
    'allauth.socialaccount.providers.github',  # GitHub OAuth
    'dj_rest_auth',  # REST API auth endpoints
    'dj_rest_auth.registration',  # Registration endpoints
    'django_otp',  # Two-factor authentication
    'django_otp.plugins.otp_totp',  # Time-based one-time passwords

    # Project-specific apps
    'wordcloud_core',  # Core functionality and Word cloud API endpoints
    'authentication',  # Custom authentication logic
]

# Middleware is executed in order, so the order matters here
MIDDLEWARE = [
    # Security middleware - should be at/near the top
    'django.middleware.security.SecurityMiddleware',  # Security headers and checks

    # Static file serving (development and production)
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Efficient static file serving

    # Session and CORS handling
    'django.contrib.sessions.middleware.SessionMiddleware',  # Session support
    'corsheaders.middleware.CorsMiddleware',  # CORS handling (must be before CommonMiddleware)
    'django.middleware.common.CommonMiddleware',  # Common request processing

    # Authentication middlewares
    "allauth.account.middleware.AccountMiddleware",  # Allauth account handling
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Authentication
    'django_otp.middleware.OTPMiddleware',  # Two-factor authentication

    # Other middleware
    'django.contrib.messages.middleware.MessageMiddleware',  # Flash messages
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
]

ROOT_URLCONF = 'wordcloud_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wordcloud_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if os.environ.get('ENV') == 'production':
    DATABASES = {
        'default': {
            'ENGINE': os.environ.get('DB_ENGINE'),
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'HOST': os.environ.get('DB_HOST'),
            'PORT': os.environ.get('DB_PORT'),
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        },
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# URL prefix for static files
STATIC_URL = '/static/'

# Local directories where static files are stored
# Add your app-specific static directories here if needed
STATICFILES_DIRS = [BASE_DIR / 'static']  

# Directory where collectstatic will collect all static files
# Run python manage.py collectstatic to populate this directory
STATIC_ROOT = BASE_DIR / 'staticfiles'  

# Media files configuration (for development)
# These are files uploaded by users

# URL prefix for media files
# MEDIA_URL = '/media/'

# Directory where media files are stored
# MEDIA_ROOT = BASE_DIR / 'media'

LOGIN_REDIRECT_URL = '/dashboard/' # Where to go after login
ACCOUNT_LOGOUT_REDIRECT_URL = '/' # Where to go after logout
SOCIALACCOUNT_LOGIN_ON_GET = True  # Automatically log in users after social account authentication

# -------------------------------------------------------------------------
# Storage Backends
# -------------------------------------------------------------------------
# For development, use local file system storage
# For production, these would be changed to Azure Blob Storage
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
# -------------------------------------------------------------------------
# Azure Storage Settings (For Production)
# -------------------------------------------------------------------------
# These settings are used in production for cloud storage
# For development, local storage is used instead (see storage backends above)
AZURE_ACCOUNT_NAME = os.environ.get('AZURE_ACCOUNT_NAME')
AZURE_ACCOUNT_KEY = os.environ.get('AZURE_ACCOUNT_KEY')
AZURE_CONTAINER_NAME = os.environ.get('AZURE_CONTAINER_NAME', 'wordclouds')

DEFAULT_FILE_STORAGE = 'wordcloud_project.custom_azure.AzureMediaStorage'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
MEDIA_URL = f'https://cdn.profesaas.com/{AZURE_CONTAINER_NAME}/'
'https://pfefstorage.blob.core.windows.net/wordclouds/wordclouds/9cf42935-40a8-49a7-85e2-aed332919c0c.png'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Trusted origins for CSRF (should match CORS origins)
# Also configurable via environment variables
CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000').split(',')

# -------------------------------------------------------------------------
# REST Framework Settings
# -------------------------------------------------------------------------
# Configuration for Django REST Framework
REST_FRAMEWORK = {
    # Authentication methods (in order of precedence)
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT tokens
        'rest_framework.authentication.SessionAuthentication',        # Session auth
        'rest_framework.authentication.TokenAuthentication',          # Token auth
    ),
    # Default permission policy - require authentication
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.IsAuthenticated',
    ),
    # Pagination settings
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,  # Default number of items per page
}

# -------------------------------------------------------------------------
# JWT (JSON Web Token) Settings
# -------------------------------------------------------------------------
# Configuration for SimpleJWT (used for token-based authentication)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),      # How long access tokens are valid
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),      # How long refresh tokens are valid
    'ROTATE_REFRESH_TOKENS': True,                    # Issue new refresh token when refreshing
    'BLACKLIST_AFTER_ROTATION': True,                 # Blacklist old refresh tokens
}

# -------------------------------------------------------------------------
# dj-rest-auth Settings
# -------------------------------------------------------------------------
# Configure dj-rest-auth to use JWT tokens
REST_USE_JWT = True
JWT_AUTH_COOKIE = 'jwt-auth'
JWT_AUTH_REFRESH_COOKIE = 'jwt-refresh-token'
REST_AUTH_SERIALIZERS = {
    'JWT_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenObtainPairSerializer',
}

# -------------------------------------------------------------------------
# Authentication Settings
# -------------------------------------------------------------------------
# Configure authentication backends
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',         # Default Django auth
    'allauth.account.auth_backends.AuthenticationBackend',  # AllAuth
)

# Site ID for django.contrib.sites
SITE_ID = 1

# AllAuth settings
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']  # Required fields for signup
ACCOUNT_EMAIL_VERIFICATION = 'none'  # Disable email verification for simplicity
ACCOUNT_LOGIN_METHODS = {'email'}             # Use email for authentication
ACCOUNT_ADAPTER = 'authentication.adapters.CustomAccountAdapter'  # Custom adapter for email confirmation

# -------------------------------------------------------------------------
# Social Authentication Settings
# -------------------------------------------------------------------------
# Configuration for social authentication providers (Google, GitHub)
# You need to register your app with these providers and get client IDs/secrets
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'github': {
        'APP': {
            'client_id': os.environ.get('GITHUB_CLIENT_ID'),
            'secret': os.environ.get('GITHUB_CLIENT_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'user',
            'email',
        ],
    }
}

# -------------------------------------------------------------------------
# Email Settings
# -------------------------------------------------------------------------
# In development: Console backend (prints emails to console)
# In production: Configure SMTP server via environment variables
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH = os.path.join(BASE_DIR, "backend/local_emails")

# -------------------------------------------------------------------------
# API Integration Settings
# -------------------------------------------------------------------------
# OpenAI API key for generating word clouds
# Get this from your OpenAI account and set in .env
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')


# -------------------------------------------------------------------------
# Application-Specific Settings
# -------------------------------------------------------------------------
# Free usage limit for OpenAI API (number of generations)
FREE_OPENAI_USAGE_LIMIT = 3

# -------------------------------------------------------------------------
# API Documentation Settings
# -------------------------------------------------------------------------
# Settings for Swagger/OpenAPI documentation
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}
